// The lines below are generated by the script 
// hmumuAnalysis/pklFilesMuonPOG/createArraysSF_2011.py

const int etaBins2011 = 13;
const int ptBins2011 = 7;
 
double etaRange2011[etaBins2011+1] = {-2.1, -1.6, -1.2, -0.9, -0.6, -0.3, -0.2,
                              0.2, 0.3, 0.6, 0.9, 1.2, 1.6, 2.1};
 
double ptRange2011[ptBins2011+1] = {10, 20, 30, 40, 50, 60, 80, 250};
 
 
// 2011A ID/Iso
double MuonIdTight_2011A[etaBins2011] = {
  0.986389287446 , 
  0.98921369419 , 
  0.989530563173 , 
  0.997521158746 , 
  0.999844542869 , 
  0.979197892009 , 
  0.996500057823 , 
  0.988579625779 , 
  1.00116523319 , 
  0.998086840183 , 
  1.00115343887 , 
  0.997915089184 , 
  1.00279518126  
};


double PFIsoIddB_eta12_2011A[ptBins2011] = {
  0.97187329075 , 
  0.984568503228 , 
  0.992423030756 , 
  0.99535554365 , 
  0.992170058662 , 
  0.993872313396 , 
  0.993271247496  
};


double PFIsoIddB_eta12to21_2011A[ptBins2011] = {
  0.989190191868 , 
  1.00271480782 , 
  1.00274598636 , 
  1.00158789661 , 
  0.99539699871 , 
  0.995568584925 , 
  0.988039073331  
};


// 2011B ID/Iso
double MuonIdTight_2011B[etaBins2011] = {
  0.940631187354 , 
  0.949115052357 , 
  0.972360316447 , 
  0.99691429303 , 
  0.999659275699 , 
  0.978131387044 , 
  0.995444496531 , 
  0.985175178072 , 
  1.00123855209 , 
  0.994287446289 , 
  0.985548028406 , 
  0.962398025845 , 
  0.96054611621  
};


double PFIsoIddB_eta12_2011B[ptBins2011] = {
  0.958160663139 , 
  0.975536117201 , 
  0.984073788145 , 
  0.990656279301 , 
  0.991084452935 , 
  0.98892037777 , 
  0.999774630941  
};


double PFIsoIddB_eta12to21_2011B[ptBins2011] = {
  0.999006216758 , 
  1.00043597215 , 
  1.0019607868 , 
  1.00242767691 , 
  1.00113878923 , 
  0.993575837027 , 
  0.993270235255  
};


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!            Do not remove the lines below                !!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
int findEtaBin2011(_MuonInfo& mu) {
 
  int value = -999;

  // find the eta bins of both muons
  for (int ieta=0; ieta<etaBins2011; ieta++) {
    if ( mu.eta > etaRange2011[ieta] && mu.eta < etaRange2011[ieta+1] ) 
      return ieta;
  }

  return value;
}


int findPtBin2011(_MuonInfo& mu) {
  
  int value = -999;
  //std::cout << "mu.pt = " << mu.pt <<std::endl;
  
  // find the eta bins of both muons
  for (int ipt=0; ipt<ptBins2011; ipt++) {
    if ( mu.pt > ptRange2011[ipt] && mu.pt < ptRange2011[ipt+1] ) 
      return ipt;
  }
  
  return value;
}



// 2011A ID/ISO
double
weightFromSF_2011A(_MuonInfo& mu1, _MuonInfo& mu2,
                   double varMuId  , 
                   double varIsoId )
{

  // initialization
  int iEta1=-999, iPt1=-999;
  int iEta2=-999, iPt2=-999;

  iEta1=findEtaBin2011(mu1);
  iPt1 =findPtBin2011 (mu1);

  iEta2=findEtaBin2011(mu2);
  iPt2 =findPtBin2011 (mu2);

  //sanity check  
  if (iEta1 == -999) return 1; 
  if (iPt1  == -999) return 1; 
  if (iEta2 == -999) return 1;
  if (iPt2  == -999) return 1;

  // compute the weights
  double weight = 1;
  
  weight *= (MuonIdTight_2011A[iEta1]+varMuId);
  weight *= (MuonIdTight_2011A[iEta2]+varMuId);

  if (fabs(mu1.eta) < 1.2)   weight *= (PFIsoIddB_eta12_2011A[iPt1]    +varIsoId);
  if (fabs(mu1.eta) > 1.2 &&
      fabs(mu1.eta) < 2.1  ) weight *= (PFIsoIddB_eta12to21_2011A[iPt1]+varIsoId);

  if (fabs(mu2.eta) < 1.2)   weight *= (PFIsoIddB_eta12_2011A[iPt2]    +varIsoId);
  if (fabs(mu2.eta) > 1.2 &&
      fabs(mu2.eta) < 2.1  ) weight *= (PFIsoIddB_eta12to21_2011A[iPt2]+varIsoId);

  return weight;

}


// 2011B ID/ISO
double
weightFromSF_2011B(_MuonInfo& mu1, _MuonInfo& mu2,
                   double varMuId  , 
                   double varIsoId )
{

  // initialization
  int iEta1=-999, iPt1=-999;
  int iEta2=-999, iPt2=-999;

  iEta1=findEtaBin2011(mu1);
  iPt1 =findPtBin2011 (mu1);

  iEta2=findEtaBin2011(mu2);
  iPt2 =findPtBin2011 (mu2);

  //sanity check  
  if (iEta1 == -999) return 1; 
  if (iPt1  == -999) return 1; 
  if (iEta2 == -999) return 1;
  if (iPt2  == -999) return 1;

  // compute the weights
  double weight = 1;
  
  weight *= (MuonIdTight_2011B[iEta1]+varMuId);
  weight *= (MuonIdTight_2011B[iEta2]+varMuId);

  if (fabs(mu1.eta) < 1.2)   weight *= (PFIsoIddB_eta12_2011B[iPt1]    +varIsoId);
  if (fabs(mu1.eta) > 1.2 &&
      fabs(mu1.eta) < 2.1  ) weight *= (PFIsoIddB_eta12to21_2011B[iPt1]+varIsoId);

  if (fabs(mu2.eta) < 1.2)   weight *= (PFIsoIddB_eta12_2011B[iPt2]    +varIsoId);
  if (fabs(mu2.eta) > 1.2 &&
      fabs(mu2.eta) < 2.1  ) weight *= (PFIsoIddB_eta12to21_2011B[iPt2]+varIsoId);

  return weight;

}


double
weightFromSF_2011(double random,
                  _MuonInfo& mu1, _MuonInfo& mu2,
                  double varMuId  , 
                  double varIsoId ,
                  double varTrigId)
{

  double weight = 1;

  // 2011A is 2.3 out of 5 fb-1 (46% of the sample)
  // 2011A is 2.7 out of 5 fb-1 (64% of the sample)
  
  if (random < 0.46) {
    //std::cout << "2011A values\n";
    weight *= weightFromSF_2011A(mu1,mu2, varMuId,varIsoId); // ID + ISO
    
  } else {
    //std::cout << "2011B values\n";
    weight *= weightFromSF_2011B(mu1,mu2, varMuId,varIsoId); // ID + ISO
  }


  return weight;
}

